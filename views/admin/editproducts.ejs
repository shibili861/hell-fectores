<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - LuxeAdmin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        :root {
            --primary-white: #fefdf8;
            --secondary-white: #ffffff;
            --light-brown: #f5f1ee;
            --medium-brown: #a1887f;
            --dark-brown: #5d4037;
            --accent-brown: #8d6e63;
            --gold: #d4af37;
            --light-gold: #f8f4e6;
            --text-dark: #3e2723;
            --text-light: #795548;
            --success: #4caf50;
            --warning: #ff9800;
            --error: #f44336;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            --transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, var(--primary-white) 0%, var(--light-gold) 100%);
            min-height: 100vh;
            margin-left: 300px;
        }

        .main-content {
            padding: 2rem;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2.5rem;
            padding-bottom: 1.5rem;
            border-bottom: 2px solid var(--light-brown);
        }

        .page-title {
            font-size: 2.2rem;
            font-weight: 700;
            background: linear-gradient(135deg, var(--dark-brown) 0%, var(--accent-brown) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: 0.5px;
        }

        .breadcrumb {
            color: var(--medium-brown);
            font-size: 0.95rem;
        }

        .breadcrumb a {
            color: var(--dark-brown);
            text-decoration: none;
            transition: var(--transition);
        }

        .breadcrumb a:hover {
            color: var(--accent-brown);
        }

        .form-container {
            background: var(--secondary-white);
            border-radius: 20px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            border: 1px solid var(--light-brown);
            max-width: 900px;
            margin: 0 auto;
        }

        .form-section {
            margin-bottom: 2.5rem;
        }

        .section-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 2px solid var(--light-brown);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .section-title i {
            color: var(--accent-brown);
            font-size: 1.1rem;
        }

        .form-vertical {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group.full-width {
            width: 100%;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 0.75rem;
            font-size: 0.95rem;
            letter-spacing: 0.3px;
        }

        .form-input, .form-textarea, .form-select {
            width: 100%;
            padding: 1rem 1.2rem;
            border: 2px solid var(--light-brown);
            border-radius: 12px;
            font-size: 1rem;
            color: var(--text-dark);
            background: var(--secondary-white);
            transition: var(--transition);
            font-family: inherit;
        }

        .form-input:focus, .form-textarea:focus, .form-select:focus {
            outline: none;
            border-color: var(--accent-brown);
            box-shadow: 0 0 0 3px rgba(141, 110, 99, 0.1);
            background: var(--primary-white);
        }

        .form-textarea {
            resize: vertical;
            min-height: 120px;
        }

        .file-upload {
            border: 2px dashed var(--light-brown);
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            transition: var(--transition);
            background: var(--primary-white);
            cursor: pointer;
        }

        .file-upload:hover {
            border-color: var(--accent-brown);
            background: var(--light-gold);
        }

        .file-upload i {
            font-size: 2.5rem;
            color: var(--accent-brown);
            margin-bottom: 1rem;
        }

        .file-upload-text {
            color: var(--dark-brown);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .file-upload-subtext {
            color: var(--text-light);
            font-size: 0.9rem;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: var(--text-dark);
            font-weight: 500;
            cursor: pointer;
        }

        .custom-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid var(--light-brown);
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

        .checkbox-input:checked + .custom-checkbox {
            background: var(--dark-brown);
            border-color: var(--dark-brown);
        }

        .checkbox-input:checked + .custom-checkbox i {
            color: var(--secondary-white);
            font-size: 0.8rem;
        }

        .checkbox-input {
            display: none;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid var(--light-brown);
        }

        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            letter-spacing: 0.3px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--dark-brown), var(--accent-brown));
            color: var(--secondary-white);
            box-shadow: 0 4px 15px rgba(93, 64, 55, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(93, 64, 55, 0.4);
        }

        .btn-secondary {
            background: var(--light-gold);
            color: var(--dark-brown);
            border: 2px solid var(--light-brown);
        }

        .btn-secondary:hover {
            background: var(--light-brown);
            transform: translateY(-2px);
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--error), #d32f2f);
            color: var(--secondary-white);
            box-shadow: 0 4px 15px rgba(244, 67, 54, 0.3);
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(244, 67, 54, 0.4);
        }

        .price-input-container {
            position: relative;
        }

        .price-prefix {
            position: absolute;
            left: 1.2rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-light);
            font-weight: 600;
        }

        .price-input {
            padding-left: 2.5rem;
        }

        /* Image Preview Styles */
        .image-preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1rem;
        }

        .image-preview {
            position: relative;
            width: 120px;
            height: 120px;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(139, 87, 42, 0.1);
            border: 2px solid var(--light-brown);
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-actions {
            position: absolute;
            top: 5px;
            right: 5px;
            display: flex;
            gap: 5px;
        }

        .image-action-btn {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .image-action-btn:hover {
            transform: scale(1.1);
        }

        .crop-btn {
            color: var(--dark-brown);
        }

        .remove-btn {
            color: var(--error);
        }

        .error-message {
            color: var(--error) !important;
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none;
            font-weight: 500;
            background: rgba(244, 67, 54, 0.1);
            padding: 8px 12px;
            border-radius: 6px;
            border-left: 3px solid var(--error);
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin-left: 15px;
        }

        .status-active {
            background: linear-gradient(135deg, rgba(76, 175, 80, 0.15), rgba(76, 175, 80, 0.25));
            color: var(--success);
            border: 2px solid rgba(76, 175, 80, 0.3);
        }

        .status-inactive {
            background: linear-gradient(135deg, rgba(244, 67, 54, 0.15), rgba(244, 67, 54, 0.25));
            color: var(--error);
            border: 2px solid rgba(244, 67, 54, 0.3);
        }

        /* Cropper Modal Styles */
        .cropper-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(62, 39, 35, 0.95);
            z-index: 10000;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(8px);
            animation: modalFadeIn 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                backdrop-filter: blur(0px);
            }
            to {
                opacity: 1;
                backdrop-filter: blur(8px);
            }
        }

        .cropper-container {
            background: linear-gradient(135deg, var(--primary-white) 0%, var(--light-gold) 100%);
            border-radius: 25px;
            padding: 2.5rem;
            max-width: 95%;
            max-height: 95vh;
            width: 900px;
            display: flex;
            flex-direction: column;
            box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(161, 136, 127, 0.2);
            position: relative;
            overflow: hidden;
        }

        .cropper-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--dark-brown), var(--accent-brown));
            border-radius: 25px 25px 0 0;
        }

        .cropper-container h3 {
            font-size: 28px;
            font-weight: 800;
            color: var(--dark-brown);
            margin-bottom: 1.5rem;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
        }

        .cropper-container h3::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: linear-gradient(135deg, var(--dark-brown), var(--gold));
            border-radius: 3px;
        }

        .cropper-preview-container {
            display: flex;
            gap: 2rem;
            margin: 1.5rem 0;
            align-items: flex-start;
            min-height: 450px;
        }

        .cropper-image-container {
            flex: 1;
            height: 450px;
            overflow: hidden;
            border-radius: 16px;
            border: 2px solid var(--light-brown);
            background: var(--secondary-white);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .cropper-preview {
            width: 180px;
            height: 180px;
            overflow: hidden;
            border-radius: 16px;
            border: 3px solid var(--dark-brown);
            background: var(--secondary-white);
            box-shadow: 0 8px 25px rgba(93, 64, 55, 0.2);
            position: relative;
        }

        .cropper-preview::before {
            content: 'Preview';
            position: absolute;
            top: -25px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 12px;
            font-weight: 600;
            color: var(--dark-brown);
            background: linear-gradient(135deg, var(--light-brown), #f0e6e1);
            padding: 4px 8px;
            border-radius: 8px;
            width: fit-content;
            margin: 0 auto;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .cropper-actions {
            display: flex;
            justify-content: center;
            gap: 1.5rem;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 2px solid rgba(161, 136, 127, 0.1);
        }

        .cropper-btn {
            padding: 14px 32px;
            border: none;
            border-radius: 15px;
            font-weight: 700;
            cursor: pointer;
            transition: var(--transition);
            font-size: 15px;
            letter-spacing: 0.5px;
            min-width: 150px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .cropper-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: var(--transition);
        }

        .cropper-btn:hover::before {
            left: 100%;
        }

        .cropper-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.25);
        }

        .cropper-btn:active {
            transform: translateY(-1px) scale(1.02);
        }

        .cropper-cancel {
            background: linear-gradient(135deg, #9e9e9e, #757575);
            color: white;
            border: 2px solid transparent;
        }

        .cropper-cancel:hover {
            background: linear-gradient(135deg, #757575, #616161);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.3);
        }

        .cropper-save {
            background: linear-gradient(135deg, var(--dark-brown), var(--accent-brown));
            color: white;
            border: 2px solid transparent;
        }

        .cropper-save:hover {
            background: linear-gradient(135deg, var(--accent-brown), var(--dark-brown));
            box-shadow: 0 12px 35px rgba(93, 64, 55, 0.6);
        }

        .cropper-close {
            position: absolute;
            top: 20px;
            right: 20px;
            background: none;
            border: none;
            color: var(--dark-brown);
            font-size: 1.5rem;
            cursor: pointer;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .cropper-close:hover {
            background: var(--light-brown);
            transform: rotate(90deg);
            color: var(--error);
        }

        /* Cropper.js custom styles */
        .cropper-view-box,
        .cropper-face {
            border: 2px solid var(--gold) !important;
            border-radius: 8px !important;
            box-shadow: 0 0 0 9999px rgba(62, 39, 35, 0.3);
        }

        .cropper-line {
            background-color: var(--gold) !important;
            opacity: 0.6;
        }

        .cropper-point {
            background-color: var(--dark-brown) !important;
            border: 2px solid var(--gold) !important;
            width: 14px !important;
            height: 14px !important;
            border-radius: 50% !important;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .cropper-dashed {
            border: 1px dashed var(--gold) !important;
            opacity: 0.6;
        }

        .cropper-modal .cropper-bg {
            background: transparent !important;
        }

        .cropper-image-container img {
            max-width: 100%;
            max-height: 100%;
            display: block;
            border-radius: 14px;
        }

        body.modal-open {
            overflow: hidden;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            body {
                margin-left: 0;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .form-container {
                padding: 1.5rem;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }

            .cropper-container {
                padding: 1.5rem;
                margin: 1rem;
                width: calc(100% - 2rem);
            }
            
            .cropper-preview-container {
                flex-direction: column;
                gap: 1rem;
            }
            
            .cropper-image-container {
                height: 350px;
            }
            
            .cropper-preview {
                width: 120px;
                height: 120px;
                align-self: center;
            }
            
            .cropper-actions {
                flex-direction: column;
                gap: 1rem;
            }
            
            .cropper-btn {
                min-width: auto;
                width: 100%;
            }
        }

        /* Shake animation */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
        }
        .shake {
            animation: shake 0.3s;
            border-color: var(--error) !important;
        }

        /* Loading overlay */
        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(62, 39, 35, 0.8);
            z-index: 10001;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(10px);
        }

        .loading-spinner {
            width: 60px;
            height: 60px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid var(--gold);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <div class="main-content">
        <div class="page-header">
            <div>
                <h1 class="page-title">Edit Product</h1>
                <div class="breadcrumb">
                    <a href="/admin/dashboard">Dashboard</a> / <a href="/admin/products">Products</a> / Edit Product
                </div>
            </div>
            <% if (product) { %>
                <span class="status-badge <%= product.isBlocked ? 'status-inactive' : 'status-active' %>">
                    <i class="fas fa-circle" style="font-size: 6px; margin-right: 5px;"></i>
                    <%= product.isBlocked ? 'Blocked' : 'Active' %>
                </span>
            <% } %>
        </div>

        <div class="form-container">
            <form action="/admin/updateProduct" method="POST" enctype="multipart/form-data" id="productForm">
                <input type="hidden" name="productId" value="<%= product ? product._id : '' %>">
                
                <!-- Basic Information Section -->
                <div class="form-section">
                    <h3 class="section-title"><i class="fas fa-info-circle"></i> Basic Information</h3>
                    <div class="form-vertical">
                        <div class="form-group">
                            <label class="form-label">Product Name</label>
                            <input type="text" class="form-input" name="productName" 
                                   placeholder="Enter product name" 
                                   value="<%= product ? product.productName : '' %>">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select class="form-select" name="category">
                                <% if (cat && cat.length > 0) { %>
                                    <% cat.forEach(category => { %>
                                        <option value="<%= category._id %>" 
                                                <%= (product && product.category && product.category._id.toString() === category._id.toString()) ? 'selected' : '' %>>
                                            <%= category.name %>
                                        </option>
                                    <% }); %>
                                <% } else { %>
                                    <option value="">No categories available</option>
                                <% } %>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Pricing Section -->
                <div class="form-section">
                    <h3 class="section-title"><i class="fas fa-tag"></i> Pricing & Inventory</h3>
                    <div class="form-vertical">
                        <div class="form-group">
                            <label class="form-label">Regular Price</label>
                            <div class="price-input-container">
                                <span class="price-prefix">$</span>
                                <input type="number" class="form-input price-input" name="regularPrice" 
                                       placeholder="0.00" step="0.01"
                                       value="<%= product ? product.regularPrice : '' %>">
                            </div>
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Sale Price</label>
                            <div class="price-input-container">
                                <span class="price-prefix">$</span>
                                <input type="number" class="form-input price-input" name="salePrice" 
                                       placeholder="0.00" step="0.01"
                                       value="<%= product ? product.salePrice : '' %>">
                            </div>
                            <div id="salePrice-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Stock Quantity</label>
                            <input type="number" class="form-input" name="stockQty" 
                                   placeholder="Enter quantity"
                                   value="<%= product ? product.quantity : '' %>">
                            <div id="stockQty-error" class="error-message"></div>
                        </div>
                    </div>
                </div>

                <!-- Description Section -->
                <div class="form-section">
                    <h3 class="section-title"><i class="fas fa-file-alt"></i> Description</h3>
                    <div class="form-vertical">
                        <div class="form-group">
                            <label class="form-label">Product Description</label>
                            <textarea class="form-textarea" name="description" 
                                      placeholder="Describe your product in detail..."><%= product ? product.description : '' %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Short Description</label>
                            <textarea class="form-textarea" name="shortDescription" 
                                      placeholder="Brief description for product listings..." 
                                      style="min-height: 80px;"><%= product ? product.shortDescription : '' %></textarea>
                        </div>
                    </div>
                </div>

                <!-- Images Section -->
                <div class="form-section">
                    <h3 class="section-title"><i class="fas fa-images"></i> Product Images</h3>
                    <div class="form-vertical">
                        <div class="form-group">
                            <label class="form-label">Current Images</label>
                            <div class="image-preview-container" id="currentImagesContainer">
                                <% if (product && product.productImage && product.productImage.length > 0) { %>
                                    <% product.productImage.forEach((image, index) => { %>
                                        <div class="image-preview">
                                            <img src="<%= image %>" alt="Product image <%= index + 1 %>">
                                            <div class="image-actions">
                                                <button type="button" class="image-action-btn remove-btn" 
                                                        data-image-index="<%= index %>">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <p style="color: var(--text-light); font-style: italic;">No images uploaded</p>
                                <% } %>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Add New Images</label>
                            <div class="file-upload" id="fileUploadArea">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <div class="file-upload-text">Click to upload new images</div>
                                <div class="file-upload-subtext">PNG, JPG, JPEG up to 5MB each</div>
                            </div>
                            <input type="file" id="imageInput" name="newImages" accept="image/png,image/jpeg,image/jpg" multiple style="display: none;">
                            <div class="image-preview-container" id="newImagesPreviewContainer"></div>
                            <div id="images-error" class="error-message"></div>
                        </div>

                        <input type="hidden" name="removedImages" id="removedImages" value="">
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <a href="/admin/allproducts" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Products
                    </a>
                   
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Update Product
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Cropper Modal -->
    <div class="cropper-modal" id="cropperModal">
        <div class="cropper-container">
            <button type="button" class="cropper-close" id="closeCropper">
                <i class="fas fa-times"></i>
            </button>
            
            <h3>Crop Image</h3>
            <div class="cropper-preview-container">
                <div class="cropper-image-container">
                    <img id="cropperImage" src="" alt="Image to crop">
                </div>
                <div class="cropper-preview" id="cropperPreview"></div>
            </div>
            <div class="cropper-actions">
                <button type="button" class="cropper-btn cropper-cancel" id="cancelCrop">Cancel</button>
                <button type="button" class="cropper-btn cropper-save" id="saveCrop">Save</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script>
        // Global variables
        let cropper;
        let currentImageIndex;
        const uploadedImages = [];
        const imageFiles = [];

        // DOM elements
        const fileUploadArea = document.getElementById('fileUploadArea');
        const imageInput = document.getElementById('imageInput');
        const newImagesPreviewContainer = document.getElementById('newImagesPreviewContainer');
        const cropperModal = document.getElementById('cropperModal');
        const cropperImage = document.getElementById('cropperImage');
        const cropperPreview = document.getElementById('cropperPreview');
        const cancelCropBtn = document.getElementById('cancelCrop');
        const saveCropBtn = document.getElementById('saveCrop');
        const closeCropperBtn = document.getElementById('closeCropper');
        const productForm = document.getElementById('productForm');
        const loadingOverlay = document.getElementById('loadingOverlay');

        // Event listeners
        fileUploadArea.addEventListener('click', () => imageInput.click());
        imageInput.addEventListener('change', handleImageUpload);
        cancelCropBtn.addEventListener('click', closeCropper);
        saveCropBtn.addEventListener('click', saveCroppedImage);
        closeCropperBtn.addEventListener('click', closeCropper);
        
        // Close modal when clicking outside
        cropperModal.addEventListener('click', function(e) {
            if (e.target === cropperModal) {
                closeCropper();
            }
        });

        // Handle image upload
        function handleImageUpload(event) {
            const files = event.target.files;
            
            if (files.length === 0) return;
            
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                
                if (!file.type.match('image.*')) {
                    showAlert('Error', 'Please select only image files.', 'error');
                    continue;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    showAlert('Error', 'File size must be less than 5MB.', 'error');
                    continue;
                }
               
                imageFiles.push(file);
                createImagePreview(file, imageFiles.length - 1);
            }
            
            document.getElementById('images-error').style.display = 'none';
        }

        // Create image preview with crop functionality
        function createImagePreview(file, index) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const previewDiv = document.createElement('div');
                previewDiv.className = 'image-preview';
                previewDiv.dataset.index = index;
                
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = 'Product image preview';
                
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'image-actions';
                
                const cropBtn = document.createElement('button');
                cropBtn.type = 'button';
                cropBtn.className = 'image-action-btn crop-btn';
                cropBtn.innerHTML = '<i class="fas fa-crop"></i>';
                cropBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    openCropper(index);
                });
                
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'image-action-btn remove-btn';
                removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                removeBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    removeImage(index);
                });
                
                actionsDiv.appendChild(cropBtn);
                actionsDiv.appendChild(removeBtn);
                previewDiv.appendChild(img);
                previewDiv.appendChild(actionsDiv);
                newImagesPreviewContainer.appendChild(previewDiv);
                
                uploadedImages[index] = {
                    original: e.target.result,
                    cropped: null,
                    file: file
                };
            };
            
            reader.readAsDataURL(file);
        }

        // Open cropper modal
        function openCropper(index) {
            currentImageIndex = index;
            cropperImage.src = uploadedImages[index].original;
            cropperModal.style.display = 'flex';
            document.body.classList.add('modal-open');
            
            setTimeout(() => {
                if (cropper) {
                    cropper.destroy();
                }
                
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                    preview: cropperPreview,
                    background: false,
                    autoCropArea: 0.8,
                    responsive: true,
                    restore: false,
                    checkCrossOrigin: false
                });
            }, 100);
        }

        // Close cropper modal
        function closeCropper() {
            cropperModal.style.display = 'none';
            document.body.classList.remove('modal-open');
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        }

        // Save cropped image
        function saveCroppedImage() {
            if (!cropper) return;
            
            const canvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800
            });
            
            if (!canvas) {
                showAlert('Error', 'Could not crop image', 'error');
                return;
            }
            
            // Convert canvas to blob and update the file
            canvas.toBlob((blob) => {
                const croppedFile = new File([blob], `cropped-${Date.now()}.jpg`, {
                    type: 'image/jpeg',
                    lastModified: Date.now()
                });
                
                // Update the file in imageFiles array
                imageFiles[currentImageIndex] = croppedFile;
                
                // Update the preview image
                const previewImg = document.querySelector(`#newImagesPreviewContainer .image-preview[data-index="${currentImageIndex}"] img`);
                previewImg.src = canvas.toDataURL('image/jpeg', 0.9);
                
                // Update uploadedImages array
                uploadedImages[currentImageIndex].cropped = canvas.toDataURL('image/jpeg', 0.9);
                uploadedImages[currentImageIndex].file = croppedFile;
                
                // Update file input
                updateFileInput();
                
                closeCropper();
                
                showAlert('Success', 'Image cropped successfully!', 'success');
            }, 'image/jpeg', 0.9);
        }

        // Remove image
        function removeImage(index) {
            imageFiles.splice(index, 1);
            uploadedImages.splice(index, 1);
            
            const preview = document.querySelector(`#newImagesPreviewContainer .image-preview[data-index="${index}"]`);
            if (preview) {
                preview.remove();
            }
            
            // Re-index remaining previews
            const previews = document.querySelectorAll('#newImagesPreviewContainer .image-preview');
            previews.forEach((preview, i) => {
                preview.dataset.index = i;
                
                const cropBtn = preview.querySelector('.crop-btn');
                const removeBtn = preview.querySelector('.remove-btn');
                
                const newCropBtn = cropBtn.cloneNode(true);
                const newRemoveBtn = removeBtn.cloneNode(true);
                
                newCropBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    openCropper(i);
                });
                
                newRemoveBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    removeImage(i);
                });
                
                cropBtn.parentNode.replaceChild(newCropBtn, cropBtn);
                removeBtn.parentNode.replaceChild(newRemoveBtn, removeBtn);
            });
            
            updateFileInput();
        }

        // Update the file input with current files
        function updateFileInput() {
            const dataTransfer = new DataTransfer();
            imageFiles.forEach(file => {
                dataTransfer.items.add(file);
            });
            imageInput.files = dataTransfer.files;
        }

        // Remove existing images functionality
        const removedImages = [];
        document.querySelectorAll('#currentImagesContainer .remove-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const imageIndex = this.getAttribute('data-image-index');
                const previewDiv = this.closest('.image-preview');
                
                // Add to removed images array
                removedImages.push(imageIndex);
                document.getElementById('removedImages').value = JSON.stringify(removedImages);
                
                // Remove from UI
                previewDiv.style.opacity = '0.5';
                previewDiv.style.transform = 'scale(0.9)';
                setTimeout(() => {
                    previewDiv.remove();
                }, 300);
            });
        });

        // Form submission with premium SweetAlert2
        document.getElementById('productForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            let isValid = true;
            
            // Clear previous errors
            document.querySelectorAll('.error-message').forEach(error => {
                error.style.display = 'none';
            });

            // Basic validation
            const productName = document.querySelector('input[name="productName"]').value.trim();
            const regularPrice = document.querySelector('input[name="regularPrice"]').value;
            const stockQty = document.querySelector('input[name="stockQty"]').value;
            const description = document.querySelector('textarea[name="description"]').value.trim();

            if (!productName) {
                document.getElementById('productName-error').textContent = 'Product name is required';
                document.getElementById('productName-error').style.display = 'block';
                isValid = false;
            }
            
            if (!regularPrice || parseFloat(regularPrice) <= 0) {
                document.getElementById('regularPrice-error').textContent = 'Valid regular price is required';
                document.getElementById('regularPrice-error').style.display = 'block';
                isValid = false;
            }
            
            if (!stockQty || parseInt(stockQty) < 0) {
                document.getElementById('stockQty-error').textContent = 'Valid stock quantity is required';
                document.getElementById('stockQty-error').style.display = 'block';
                isValid = false;
            }
            
            if (!description) {
                document.getElementById('description-error').textContent = 'Product description is required';
                document.getElementById('description-error').style.display = 'block';
                isValid = false;
            }

            if (!isValid) {
                // Add shake animation to invalid fields
                document.querySelectorAll('.form-input, .form-textarea').forEach(field => {
                    if (!field.value.trim()) {
                        field.classList.add('shake');
                        setTimeout(() => field.classList.remove('shake'), 500);
                    }
                });
                return;
            }

            // Show loading overlay
            loadingOverlay.style.display = 'flex';

            // Prepare form data
            const formData = new FormData(this);
            
            // Submit form via AJAX
            fetch(this.action, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                loadingOverlay.style.display = 'none';
                
                if (data.success) {
                    showAlert(
                        'Success!', 
                        data.message, 
                        'success',
                        data.redirectUrl
                    );
                } else {
                    showAlert('Error!', data.message, 'error');
                }
            })
            .catch(error => {
                loadingOverlay.style.display = 'none';
                console.error('Error:', error);
                showAlert('Error!', 'An error occurred while updating the product', 'error');
            });
        });

        // Premium SweetAlert2 function
        function showAlert(title, text, icon, redirectUrl = null) {
            const swalConfig = {
                title: title,
                text: text,
                icon: icon,
                confirmButtonText: 'OK',
                confirmButtonColor: icon === 'success' ? '#5d4037' : '#d32f2f',
                background: 'linear-gradient(135deg, #fefdf8 0%, #f8f4e6 100%)',
                color: '#3e2723',
                customClass: {
                    popup: 'sweetalert-popup',
                    title: 'sweetalert-title',
                    confirmButton: 'sweetalert-confirm-btn'
                },
                buttonsStyling: false,
                showClass: {
                    popup: `
                        animate__animated 
                        animate__zoomIn 
                        animate__faster
                    `
                },
                hideClass: {
                    popup: `
                        animate__animated 
                        animate__zoomOut 
                        animate__faster
                    `
                }
            };

            if (icon === 'success') {
                swalConfig.title = `
                    <div style="color: #5d4037; font-size: 2rem; margin-bottom: 1rem;">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div style="font-size: 1.5rem; font-weight: 700; color: #5d4037;">${title}</div>
                `;
                swalConfig.html = `
                    <div style="text-align: center;">
                        <div style="font-size: 1.1rem; color: #795548; margin-bottom: 1.5rem;">${text}</div>
                        <div style="font-size: 3rem; color: #4caf50; margin: 1rem 0;">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    </div>
                `;
            } else {
                swalConfig.title = `
                    <div style="color: #d32f2f; font-size: 2rem; margin-bottom: 1rem;">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div style="font-size: 1.5rem; font-weight: 700; color: #d32f2f;">${title}</div>
                `;
            }

            Swal.fire(swalConfig).then((result) => {
                if (result.isConfirmed && redirectUrl) {
                    window.location.href = redirectUrl;
                }
            });
        }

        // Add custom styles for SweetAlert2
        const style = document.createElement('style');
        style.textContent = `
            .sweetalert-popup {
                border-radius: 20px !important;
                border: 2px solid #f5f1ee !important;
                box-shadow: 0 25px 60px rgba(0, 0, 0, 0.3) !important;
                background: linear-gradient(135deg, #fefdf8 0%, #f8f4e6 100%) !important;
            }
            .sweetalert-confirm-btn {
                padding: 12px 30px !important;
                border-radius: 12px !important;
                font-weight: 600 !important;
                font-size: 1rem !important;
                transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;
                border: none !important;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2) !important;
            }
            .sweetalert-confirm-btn:hover {
                transform: translateY(-2px) !important;
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3) !important;
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>